/** @file Game.hpp
 * @brief Заголовочный файл для класса Game, управляющего основной логикой игры.
 * @author H0ly */

#ifndef GAME_H /**< Проверяет, не был ли файл уже включён, чтобы избежать повторного включения. */
#define GAME_H /**< Определяет макрос GAME_H для защиты от повторного включения. */

#include <vector> /**< Подключает библиотеку vector для хранения списка врагов. */
#include <memory> /**< Подключает библиотеку memory для работы с умными указателями. */
#include <map> /**< Подключает библиотеку map для хранения состояний клавиш. */
#include <chrono> /**< Подключает библиотеку chrono для расчёта времени кадра. */

class Level; /**< Предварительное объявление класса Level для избежания циклической зависимости. */
class Player; /**< Предварительное объявление класса Player для работы с игроком. */
class Enemy; /**< Предварительное объявление класса Enemy для работы с врагами. */

/** @brief Класс Game, управляющий основным игровым процессом, включая рендеринг и ввод.
 * @author H0ly */

class Game { /**< Объявляет класс Game. */
public: /**< Начинает секцию публичных членов класса. */
    Game(); /**< Конструктор класса Game, инициализирует ncurses и параметры игры. */
    ~Game(); /**< Деструктор класса Game, завершает работу ncurses. */
    void setupLevel(int difficulty); /**< Настраивает уровень с заданной сложностью. */
    void runGame(); /**< Запускает основной игровой цикл. */
    int getScreenWidth() const { return screenWidth; } /**< Возвращает ширину экрана консоли. */
    int getScreenHeight() const { return screenHeight; } /**< Возвращает высоту экрана консоли. */
    int getCameraX() const { return cameraX; } /**< Возвращает X-координату камеры. */
    int getCameraY() const { return cameraY; } /**< Возвращает Y-координату камеры. */

private: /**< Начинает секцию приватных членов класса. */
    void handleInput(int key, bool& pause); /**< Обрабатывает ввод пользователя и обновляет состояние паузы. */
    void render(); /**< Рендерит игровую сцену, включая уровень, игрока и врагов. */
    std::unique_ptr<Level> level; /**< Умный указатель на объект уровня. */
    std::unique_ptr<Player> player; /**< Умный указатель на объект игрока. */
    std::vector<std::unique_ptr<Enemy>> enemies; /**< Вектор умных указателей на врагов. */
    int screenWidth, screenHeight; /**< Размеры экрана консоли (ширина и высота). */
    int cameraX, cameraY; /**< Координаты камеры для отображения части уровня. */
    std::map<int, bool> keyStates; /**< Карта для хранения состояний клавиш (нажата/не нажата). */
}; /**< Завершает определение класса Game. */

#endif /**< Завершает защиту от повторного включения файла. */