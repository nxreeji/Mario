/** @file MainMenu.cpp
 * @brief Реализация класса MainMenu, управляющего отображением и выбором пунктов главного меню.
 * @author akonch
 */

#include "MainMenu.hpp" /**< Подключает заголовочный файл MainMenu.hpp с объявлением класса MainMenu. */
#include "Utils.hpp" /**< Подключает заголовочный файл Utils.hpp для функции логирования getCurrentTime(). */
#include <ncurses.h> /**< Подключает библиотеку ncurses для работы с консольным интерфейсом. */
#include <fstream> /**< Подключает библиотеку для работы с файлами (логирование). */

/** @brief Внешняя глобальная переменная debugLog для записи логов в файл debug.log.
 * @author akonch
 */
extern std::ofstream debugLog;

/** @brief Конструктор класса MainMenu, инициализирует пункты главного меню и подменю сложности.
 * @author akoch
 */
MainMenu::MainMenu() { /**< Объявляет конструктор MainMenu. */
    menuItems = {"Start Game", "Select Difficulty", "Exit"}; /**< Инициализирует пункты главного меню. */
    difficultyItems = {"Easy", "Medium", "Hard"}; /**< Инициализирует пункты подменю выбора сложности. */
    debugLog << "[" << getCurrentTime() << "] Главное меню инициализировано\n"; /**< Логирует инициализацию меню. */
} /**< Завершает конструктор MainMenu. */

/** @brief Рендерит меню с указанными пунктами и выделенным элементом.
 * @param items Вектор строк с пунктами меню.
 * @param selected Индекс текущего выделенного пункта.
 * @author akonch
 */
void MainMenu::renderMenu(const std::vector<std::string>& items, int selected) { /**< Объявляет метод рендеринга меню. */
    clear(); /**< Очищает экран консоли перед отрисовкой. */
    int startY = (LINES - items.size()) / 2; /**< Вычисляет начальную Y-координату для центрирования меню по вертикали. */
    int startX = (COLS - 20) / 2; /**< Вычисляет начальную X-координату для центрирования меню по горизонтали (предполагая максимальную длину пункта ~20). */

    for (size_t i = 0; i < items.size(); ++i) { /**< Перебирает пункты меню для отрисовки. */
        if (i == static_cast<size_t>(selected)) { /**< Проверяет, является ли текущий пункт выделенным. */
            attron(A_REVERSE); /**< Включает инверсию цветов для выделенного пункта. */
            mvprintw(startY + i, startX, "> %s", items[i].c_str()); /**< Отрисовывает выделенный пункт с символом ">". */
            attroff(A_REVERSE); /**< Выключает инверсию цветов. */
        } else { /**< Обрабатывает невыделенные пункты. */
            mvprintw(startY + i, startX, "  %s", items[i].c_str()); /**< Отрисовывает невыделенный пункт с отступом. */
        } /**< Завершает обработку текущего пункта. */
    } /**< Завершает цикл отрисовки пунктов. */
    refresh(); /**< Обновляет экран для отображения изменений. */
} /**< Завершает метод renderMenu. */

/** @brief Отображает главное меню и обрабатывает выбор пользователя.
 * @return Индекс выбранного пункта (0: начать, 1: сложность, 2: выход).
 * @author akonch
 */
int MainMenu::display() { /**< Объявляет метод отображения главного меню. */
    int selected = 0; /**< Устанавливает начальный выделенный пункт (первый). */
    int key; /**< Переменная для хранения кода нажатой клавиши. */

    while (true) { /**< Запускает цикл обработки ввода в меню. */
        renderMenu(menuItems, selected); /**< Рендерит главное меню с текущим выделенным пунктом. */
        key = getch(); /**< Считывает нажатую клавишу. */
        debugLog << "[" << getCurrentTime() << "] Нажата клавиша в главном меню (код): " << key << "\n"; /**< Логирует код нажатой клавиши. */

        switch (key) { /**< Начинает обработку нажатой клавиши. */
            case KEY_UP: /**< Проверяет нажатие стрелки вверх. */
                selected = (selected - 1 + menuItems.size()) % menuItems.size(); /**< Перемещает выделение вверх с циклическим переходом. */
                debugLog << "[" << getCurrentTime() << "] Выбор в главном меню: вверх, selected=" << selected << "\n"; /**< Логирует перемещение вверх. */
                break; /**< Завершает обработку стрелки вверх. */
            case KEY_DOWN: /**< Проверяет нажатие стрелки вниз. */
                selected = (selected + 1) % menuItems.size(); /**< Перемещает выделение вниз с циклическим переходом. */
                debugLog << "[" << getCurrentTime() << "] Выбор в главном меню: вниз, selected=" << selected << "\n"; /**< Логирует перемещение вниз. */
                break; /**< Завершает обработку стрелки вниз. */
            case 10: /**< Проверяет нажатие Enter (код 10). */
                debugLog << "[" << getCurrentTime() << "] Выбран пункт главного меню: " << menuItems[selected] << "\n"; /**< Логирует выбор пункта. */
                return selected; /**< Возвращает индекс выбранного пункта. */
            case 27: /**< Проверяет нажатие Esc (код 27). */
                debugLog << "[" << getCurrentTime() << "] Нажата Esc в главном меню, выбор пункта Exit\n"; /**< Логирует нажатие Esc. */
                return 2; /**< Возвращает индекс пункта "Exit". */
            default: /**< Обрабатывает необработанные клавиши. */
                debugLog << "[" << getCurrentTime() << "] Необработанная клавиша в главном меню: " << key << "\n"; /**< Логирует код необработанной клавиши. */
                break; /**< Завершает обработку по умолчанию. */
        } /**< Завершает обработку клавиши. */
    } /**< Завершает цикл обработки меню. */
} /**< Завершает метод display. */

/** @brief Отображает подменю выбора сложности и обрабатывает выбор пользователя.
 * @return Индекс выбранной сложности (0: лёгкая, 1: средняя, 2: сложная).
 * @author akonch
 */
int MainMenu::selectDifficulty() { /**< Объявляет метод выбора сложности. */
    int selected = 0; /**< Устанавливает начальный выделенный пункт (первый). */
    int key; /**< Переменная для хранения кода нажатой клавиши. */

    while (true) { /**< Запускает цикл обработки ввода в подменю сложности. */
        renderMenu(difficultyItems, selected); /**< Рендерит подменю сложности с текущим выделенным пунктом. */
        key = getch(); /**< Считывает нажатую клавишу. */
        debugLog << "[" << getCurrentTime() << "] Нажата клавиша в меню сложности (код): " << key << "\n"; /**< Логирует код нажатой клавиши. */

        switch (key) { /**< Начинает обработку нажатой клавиши. */
            case KEY_UP: /**< Проверяет нажатие стрелки вверх. */
                selected = (selected - 1 + difficultyItems.size()) % difficultyItems.size(); /**< Перемещает выделение вверх с циклическим переходом. */
                debugLog << "[" << getCurrentTime() << "] Выбор в меню сложности: вверх, selected=" << selected << "\n"; /**< Логирует перемещение вверх. */
                break; /**< Завершает обработку стрелки вверх. */
            case KEY_DOWN: /**< Проверяет нажатие стрелки вниз. */
                selected = (selected + 1) % difficultyItems.size(); /**< Перемещает выделение вниз с циклическим переходом. */
                debugLog << "[" << getCurrentTime() << "] Выбор в меню сложности: вниз, selected=" << selected << "\n"; /**< Логирует перемещение вниз. */
                break; /**< Завершает обработку стрелки вниз. */
            case 10: /**< Проверяет нажатие Enter (код 10). */
                debugLog << "[" << getCurrentTime() << "] Выбрана сложность: " << difficultyItems[selected] << "\n"; /**< Логирует выбор сложности. */
                return selected; /**< Возвращает индекс выбранной сложности. */
            case 27: /**< Проверяет нажатие Esc (код 27). */
                debugLog << "[" << getCurrentTime() << "] Нажата Esc в меню сложности, возврат в главное меню\n"; /**< Логирует нажатие Esc. */
                return -1; /**< Возвращает -1 для возврата в главное меню. */
            default: /**< Обрабатывает необработанные клавиши. */
                debugLog << "[" << getCurrentTime() << "] Необработанная клавиша в меню сложности: " << key << "\n"; /**< Логирует код необработанной клавиши. */
                break; /**< Завершает обработку по умолчанию. */
        } /**< Завершает обработку клавиши. */
    } /**< Завершает цикл обработки подменю. */
} /**< Завершает метод selectDifficulty. */