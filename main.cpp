/** @file main.cpp
    @brief Точка входа в программу, инициализирует меню и игровой процесс.
    @author nxreeji */

#include "Game.hpp" /* Подключает заголовочный файл Game.hpp для работы с игрой. */
#include "MainMenu.hpp" /* Подключает заголовочный файл MainMenu.hpp для работы с главным меню. */
#include "Utils.hpp" /* Подключает заголовочный файл Utils.hpp для логирования. */
#include <ncurses.h> /* Подключает библиотеку ncurses для работы с консольным интерфейсом. */
#include <stdexcept> /* Подключает библиотеку для обработки исключений. */
#include <fstream> /* Подключает библиотеку для работы с файлами (логирование). */

/** @brief Внешняя глобальная переменная debugLog для записи логов в файл debug.log. */

extern std::ofstream debugLog;

/** @brief Точка входа в программу.
    @return Код возврата (0 при успешном завершении). */

int main() 
{ /* Объявляет главную функцию программы. */
    debugLog << "[" << getCurrentTime() << "] Программа запущена\n"; /* Логирует запуск программы. */

    try 
    { /* Начинает блок обработки исключений для всего игрового процесса. */
        initscr(); /* Инициализирует ncurses для работы с консолью. */
        start_color(); /* Включает поддержку цветов в ncurses. */
        cbreak(); /* Включает режим cbreak для немедленной обработки ввода. */
        noecho(); /* Отключает отображение вводимых символов. */
        keypad(stdscr, TRUE); /* Включает поддержку специальных клавиш (стрелки, Esc). */
        curs_set(0); /* Скрывает курсор консоли. */

        MainMenu menu; /* Создаёт объект главного меню. */
        int difficulty = 0; /* Устанавливает начальную сложность (0 = лёгкая). */

        while (true) 
        { /* Запускает цикл обработки главного меню. */
            int choice = menu.display(); /* Отображает главное меню и получает выбор пользователя. */
            if (choice == 0) 
            { /* Проверяет, выбран ли пункт "Start Game". */
                Game game; /* Создаёт объект игры. */
                debugLog << "[" << getCurrentTime() << "] Игра начата, сложность: " << difficulty << "\n"; /* Логирует начало игры. */
                game.setupLevel(difficulty); /* Настраивает уровень с текущей сложностью. */
                game.runGame(); /* Запускает игровой цикл. */
                debugLog << "[" << getCurrentTime() << "] Игра завершена\n"; /* Логирует завершение игры. */
            } else if (choice == 1) 
            { /* Проверяет, выбран ли пункт "Select Difficulty". */
                int newDifficulty = menu.selectDifficulty(); /* Отображает подменю сложности и получает выбор. */
                if (newDifficulty != -1) { /* Проверяет, не был ли нажат Esc (возврат в меню). */
                    difficulty = newDifficulty; /* Обновляет текущую сложность. */
                    debugLog << "[" << getCurrentTime() << "] Сложность изменена на: " << newDifficulty << "\n"; /* Логирует изменение сложности. */
                } /* Завершает обработку выбора сложности. */
            } else if (choice == 2) 
            { /* Проверяет, выбран ли пункт "Exit". */
                debugLog << "[" << getCurrentTime() << "] Выход из программы\n"; /* Логирует выход из программы. */
                break; /* Выходит из цикла меню, завершая программу. */
            } /* Завершает обработку выбора пункта меню. */
        } /* Завершает цикл главного меню. */

        endwin(); /* Завершает работу ncurses. */
    } catch (const std::exception& e) { /* Ловит любые исключения, возникшие в процессе. */
        debugLog << "[" << getCurrentTime() << "] Ошибка: " << e.what() << "\n"; /* Логирует ошибку с описанием. */
        endwin(); /* Завершает ncurses в случае ошибки. */
        return 1; /* Возвращает код ошибки. */
    } /* Завершает блок обработки исключений. */

    debugLog << "[" << getCurrentTime() << "] Программа завершена\n"; /* Логирует завершение программы. */
    return 0; /* Возвращает код успешного завершения. */
} /* Завершает главную функцию. */
