/** @file Enemy.cpp
 * @brief Реализация класса Enemy, управляющего поведением врага, включая движение и коллизии.
 * @author AnastaVensk
 */

#include "Enemy.hpp" /**< Подключает заголовочный файл Enemy.hpp с объявлением класса Enemy. */
#include "Utils.hpp" /**< Подключает заголовочный файл Utils.hpp для функции логирования getCurrentTime(). */
#include <fstream> /**< Подключает библиотеку для работы с файлами (логирование). */
#include <cmath> /**< Подключает библиотеку для математических функций, таких как std::abs. */

/** @brief Внешняя переменная debugLog для записи логов в файл debug.log.
 * @author AnastaVensk
 */
extern std::ofstream debugLog;

/** @brief Конструктор класса Enemy, инициализирует врага с заданными параметрами.
 * @param x Начальная координата X врага.
 * @param y Начальная координата Y врага.
 * @param difficulty Уровень сложности, влияющий на скорость врага.
 * @author AnastaVensk
 */
Enemy::Enemy(float x, float y, int difficulty) : x(x), y(y), velocityX(2.0f + difficulty) { /**< Инициализирует координаты и скорость врага с учётом сложности. */
    debugLog << "[" << getCurrentTime() << "] Враг создан: x=" << x << "\ty=" << y << "\tскорость=" << velocityX << "\n"; /**< Логирует создание врага с координатами и скоростью. */
} /**< Завершает конструктор Enemy. */

/** @brief Обновляет состояние врага, включая движение и проверку коллизий.
 * @param level Ссылка на объект уровня для проверки коллизий.
 * @param deltaTime Время, прошедшее с последнего кадра, для плавного движения.
 * @author AnastaVensk
 */
void Enemy::update(Level& level, float deltaTime) { /**< Объявляет метод обновления состояния врага. */
    float newX = x + velocityX * deltaTime; /**< Вычисляет новую координату X с учётом скорости и времени. */

    int checkX = static_cast<int>(newX + (velocityX > 0 ? 0.9f : 0.0f)); /**< Вычисляет X-координату для проверки коллизии, добавляя смещение при движении вправо. */
    if (checkX >= 0 && checkX < level.getWidth() && level.getTile(checkX, static_cast<int>(y)) != TileType::WALL) { /**< Проверяет, находится ли новая позиция в пределах уровня и не сталкивается со стеной. */
        x = newX; /**< Обновляет координату X врага. */
    } else { /**< Обрабатывает столкновение со стеной. */
        velocityX = -velocityX; /**< Меняет направление движения врага (инвертирует скорость). */
        debugLog << "[" << getCurrentTime() << "] Враг меняет направление: velocityX=" << velocityX << "\tx=" << x << "\n"; /**< Логирует изменение направления с текущей скоростью и позицией. */
    } /**< Завершает обработку движения. */
} /**< Завершает метод update. */